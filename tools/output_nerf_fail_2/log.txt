[03/01 10:22:09] detectron2 INFO: Rank of current process: 0. World size: 1
[03/01 10:22:09] detectron2 INFO: Environment info:
----------------------  --------------------------------------------------------------------------
sys.platform            linux
Python                  3.10.6 (main, Nov 14 2022, 16:10:14) [GCC 11.3.0]
numpy                   1.24.2
detectron2              0.6 @/home/nahyun/.local/lib/python3.10/site-packages/detectron2
Compiler                GCC 11.3
CUDA compiler           not available
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/home/nahyun/.local/lib/python3.10/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0                   NVIDIA GeForce RTX 3090 (arch=8.6)
GPU 1                   NVIDIA GeForce RTX 3080 Ti (arch=8.6)
Driver version          525.78.01
CUDA_HOME               None - invalid!
Pillow                  9.0.1
torchvision             0.14.1+cu117 @/home/nahyun/.local/lib/python3.10/site-packages/torchvision
torchvision arch flags  /home/nahyun/.local/lib/python3.10/site-packages/torchvision/_C.so
fvcore                  0.1.5.post20221221
iopath                  0.1.9
cv2                     4.7.0
----------------------  --------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[03/01 10:22:09] detectron2 INFO: Command line arguments: Namespace(config_file='../configs/COCO-Detection/retinanet_R_50_FPN_3x.yaml', resume=False, eval_only=False, num_gpus=1, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:50152', opts=[])
[03/01 10:22:09] detectron2 INFO: Contents of args.config_file=../configs/COCO-Detection/retinanet_R_50_FPN_3x.yaml:
_BASE_: "../Base-RetinaNet.yaml"
MODEL:
  WEIGHTS: "detectron2://ImageNetPretrained/MSRA/R-50.pkl"
  RESNETS:
    DEPTH: 50
SOLVER:
  STEPS: (210000, 250000)
  MAX_ITER: 270000

[03/01 10:22:09] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - coco_2017_val
  TRAIN:
  - coco_2017_train
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: BGR
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 40.31747359663594
      - 50.79683366298238
    - - 64
      - 80.63494719327188
      - 101.59366732596476
    - - 128
      - 161.26989438654377
      - 203.18733465192952
    - - 256
      - 322.53978877308754
      - 406.37466930385904
    - - 512
      - 645.0795775461751
      - 812.7493386077181
  BACKBONE:
    FREEZE_AT: 2
    NAME: build_retinanet_resnet_fpn_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES:
    - res3
    - res4
    - res5
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: RetinaNet
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 103.53
  - 116.28
  - 123.675
  PIXEL_STD:
  - 1.0
  - 1.0
  - 1.0
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: true
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.0
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: https://dl.fbaipublicfiles.com/detectron2/COCO-Detection/retinanet_R_50_FPN_3x/190397829/model_final_5bd44e.pkl
OUTPUT_DIR: ./output
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.01
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 270000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 210000
  - 250000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 1000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[03/01 10:22:09] detectron2 INFO: Full config saved to ./output/config.yaml
[03/01 10:22:09] d2.utils.env INFO: Using a generated random seed 12197436
[03/01 10:22:11] d2.engine.defaults INFO: Model:
RetinaNet(
  (backbone): FPN(
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelP6P7(
      (p6): Conv2d(2048, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (p7): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    )
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (head): RetinaNetHead(
    (cls_subnet): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
      (4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): ReLU()
      (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (7): ReLU()
    )
    (bbox_subnet): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
      (4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): ReLU()
      (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (7): ReLU()
    )
    (cls_score): Conv2d(256, 900, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (bbox_pred): Conv2d(256, 36, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (anchor_generator): DefaultAnchorGenerator(
    (cell_anchors): BufferList()
  )
)
[03/01 10:22:13] d2.data.datasets.coco INFO: Loading /media/nahyun/HDD//data_100/instances_train.json takes 2.25 seconds.
[03/01 10:22:13] d2.data.datasets.coco WARNING: 
Category ids in annotations are not in [1, #categories]! We'll apply a mapping for you.

[03/01 10:22:13] d2.data.datasets.coco INFO: Loaded 19191 images in COCO format from /media/nahyun/HDD//data_100/instances_train.json
[03/01 10:22:14] d2.data.build INFO: Removed 0 images with no usable annotations. 19191 images left.
[03/01 10:22:14] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[03/01 10:22:14] d2.data.build INFO: Using training sampler TrainingSampler
[03/01 10:22:14] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[03/01 10:22:14] d2.data.common INFO: Serializing 19191 elements to byte tensors and concatenating them all ...
[03/01 10:22:15] d2.data.common INFO: Serialized dataset takes 80.55 MiB
[03/01 10:22:15] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[03/01 10:22:15] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from https://dl.fbaipublicfiles.com/detectron2/COCO-Detection/retinanet_R_50_FPN_3x/190397829/model_final_5bd44e.pkl ...
[03/01 10:22:15] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /home/nahyun/.torch/iopath_cache/detectron2/COCO-Detection/retinanet_R_50_FPN_3x/190397829/model_final_5bd44e.pkl ...
[03/01 10:22:15] fvcore.common.checkpoint INFO: Reading a file from 'Detectron2 Model Zoo'
[03/01 10:22:15] fvcore.common.checkpoint WARNING: Skip loading parameter 'head.cls_score.weight' to the model due to incompatible shapes: (720, 256, 3, 3) in the checkpoint but (900, 256, 3, 3) in the model! You might want to double check if this is expected.
[03/01 10:22:15] fvcore.common.checkpoint WARNING: Skip loading parameter 'head.cls_score.bias' to the model due to incompatible shapes: (720,) in the checkpoint but (900,) in the model! You might want to double check if this is expected.
[03/01 10:22:15] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mhead.cls_score.{bias, weight}[0m
[03/01 10:22:15] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mpixel_mean[0m
  [35mpixel_std[0m
[03/01 10:22:15] d2.engine.train_loop INFO: Starting training from iteration 0
[03/01 10:22:23] d2.engine.hooks INFO: Overall training speed: 6 iterations in 0:00:05 (0.8698 s / it)
[03/01 10:22:23] d2.engine.hooks INFO: Total training time: 0:00:05 (0:00:00 on hooks)
[03/01 10:22:23] d2.utils.events INFO:  eta: 1:03:17  iter: 8  total_loss: 3.681  loss_cls: 3.012  loss_box_reg: 0.669  time: 0.8635  last_time: 0.7665  data_time: 0.0924  last_data_time: 0.0753   lr: 7.993e-05  max_mem: 18325M
[03/01 10:24:13] detectron2 INFO: Rank of current process: 0. World size: 1
[03/01 10:24:13] detectron2 INFO: Environment info:
----------------------  --------------------------------------------------------------------------
sys.platform            linux
Python                  3.10.6 (main, Nov 14 2022, 16:10:14) [GCC 11.3.0]
numpy                   1.24.2
detectron2              0.6 @/home/nahyun/.local/lib/python3.10/site-packages/detectron2
Compiler                GCC 11.3
CUDA compiler           not available
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/home/nahyun/.local/lib/python3.10/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0                   NVIDIA GeForce RTX 3090 (arch=8.6)
GPU 1                   NVIDIA GeForce RTX 3080 Ti (arch=8.6)
Driver version          525.78.01
CUDA_HOME               None - invalid!
Pillow                  9.0.1
torchvision             0.14.1+cu117 @/home/nahyun/.local/lib/python3.10/site-packages/torchvision
torchvision arch flags  /home/nahyun/.local/lib/python3.10/site-packages/torchvision/_C.so
fvcore                  0.1.5.post20221221
iopath                  0.1.9
cv2                     4.7.0
----------------------  --------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[03/01 10:24:13] detectron2 INFO: Command line arguments: Namespace(config_file='../configs/COCO-Detection/retinanet_R_50_FPN_3x.yaml', resume=False, eval_only=False, num_gpus=1, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:50152', opts=[])
[03/01 10:24:13] detectron2 INFO: Contents of args.config_file=../configs/COCO-Detection/retinanet_R_50_FPN_3x.yaml:
_BASE_: "../Base-RetinaNet.yaml"
MODEL:
  WEIGHTS: "detectron2://ImageNetPretrained/MSRA/R-50.pkl"
  RESNETS:
    DEPTH: 50
SOLVER:
  STEPS: (210000, 250000)
  MAX_ITER: 270000

[03/01 10:24:13] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - coco_2017_val
  TRAIN:
  - coco_2017_train
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: BGR
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 40.31747359663594
      - 50.79683366298238
    - - 64
      - 80.63494719327188
      - 101.59366732596476
    - - 128
      - 161.26989438654377
      - 203.18733465192952
    - - 256
      - 322.53978877308754
      - 406.37466930385904
    - - 512
      - 645.0795775461751
      - 812.7493386077181
  BACKBONE:
    FREEZE_AT: 2
    NAME: build_retinanet_resnet_fpn_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES:
    - res3
    - res4
    - res5
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: RetinaNet
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 103.53
  - 116.28
  - 123.675
  PIXEL_STD:
  - 1.0
  - 1.0
  - 1.0
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: true
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.0
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: https://dl.fbaipublicfiles.com/detectron2/COCO-Detection/retinanet_R_50_FPN_3x/190397829/model_final_5bd44e.pkl
OUTPUT_DIR: ./output
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.01
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 270000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 210000
  - 250000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 1000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[03/01 10:24:13] detectron2 INFO: Full config saved to ./output/config.yaml
[03/01 10:24:13] d2.utils.env INFO: Using a generated random seed 15634444
[03/01 10:24:14] d2.engine.defaults INFO: Model:
RetinaNet(
  (backbone): FPN(
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelP6P7(
      (p6): Conv2d(2048, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (p7): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    )
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (head): RetinaNetHead(
    (cls_subnet): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
      (4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): ReLU()
      (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (7): ReLU()
    )
    (bbox_subnet): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
      (4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): ReLU()
      (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (7): ReLU()
    )
    (cls_score): Conv2d(256, 900, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (bbox_pred): Conv2d(256, 36, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (anchor_generator): DefaultAnchorGenerator(
    (cell_anchors): BufferList()
  )
)
[03/01 10:24:16] d2.data.datasets.coco INFO: Loading /media/nahyun/HDD//data_100/instances_train.json takes 2.22 seconds.
[03/01 10:24:16] d2.data.datasets.coco WARNING: 
Category ids in annotations are not in [1, #categories]! We'll apply a mapping for you.

[03/01 10:24:16] d2.data.datasets.coco INFO: Loaded 19191 images in COCO format from /media/nahyun/HDD//data_100/instances_train.json
[03/01 10:24:18] d2.data.build INFO: Removed 0 images with no usable annotations. 19191 images left.
[03/01 10:24:18] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[03/01 10:24:18] d2.data.build INFO: Using training sampler TrainingSampler
[03/01 10:24:18] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[03/01 10:24:18] d2.data.common INFO: Serializing 19191 elements to byte tensors and concatenating them all ...
[03/01 10:24:18] d2.data.common INFO: Serialized dataset takes 80.55 MiB
[03/01 10:24:18] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[03/01 10:24:18] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from https://dl.fbaipublicfiles.com/detectron2/COCO-Detection/retinanet_R_50_FPN_3x/190397829/model_final_5bd44e.pkl ...
[03/01 10:24:18] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /home/nahyun/.torch/iopath_cache/detectron2/COCO-Detection/retinanet_R_50_FPN_3x/190397829/model_final_5bd44e.pkl ...
[03/01 10:24:18] fvcore.common.checkpoint INFO: Reading a file from 'Detectron2 Model Zoo'
[03/01 10:24:18] fvcore.common.checkpoint WARNING: Skip loading parameter 'head.cls_score.weight' to the model due to incompatible shapes: (720, 256, 3, 3) in the checkpoint but (900, 256, 3, 3) in the model! You might want to double check if this is expected.
[03/01 10:24:18] fvcore.common.checkpoint WARNING: Skip loading parameter 'head.cls_score.bias' to the model due to incompatible shapes: (720,) in the checkpoint but (900,) in the model! You might want to double check if this is expected.
[03/01 10:24:18] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mhead.cls_score.{bias, weight}[0m
[03/01 10:24:18] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mpixel_mean[0m
  [35mpixel_std[0m
[03/01 10:24:18] d2.engine.train_loop INFO: Starting training from iteration 0
[03/01 10:24:36] d2.utils.events INFO:  eta: 1:03:55  iter: 19  total_loss: 2.105  loss_cls: 1.739  loss_box_reg: 0.3664  time: 0.8026  last_time: 0.7717  data_time: 0.0823  last_data_time: 0.0783   lr: 0.00019981  max_mem: 18322M
[03/01 10:24:51] d2.utils.events INFO:  eta: 1:03:08  iter: 39  total_loss: 1.42  loss_cls: 1.196  loss_box_reg: 0.2215  time: 0.7778  last_time: 0.7770  data_time: 0.0656  last_data_time: 0.0799   lr: 0.00039961  max_mem: 18322M
[03/01 10:25:06] d2.utils.events INFO:  eta: 1:02:46  iter: 59  total_loss: 1.372  loss_cls: 1.163  loss_box_reg: 0.1978  time: 0.7702  last_time: 0.7753  data_time: 0.0667  last_data_time: 0.0769   lr: 0.00059941  max_mem: 18322M
[03/01 10:25:21] d2.utils.events INFO:  eta: 1:02:31  iter: 79  total_loss: 1.319  loss_cls: 1.117  loss_box_reg: 0.2055  time: 0.7688  last_time: 0.7696  data_time: 0.0670  last_data_time: 0.0720   lr: 0.00079921  max_mem: 18322M
[03/01 10:25:37] d2.utils.events INFO:  eta: 1:02:23  iter: 99  total_loss: 1.255  loss_cls: 1.06  loss_box_reg: 0.1931  time: 0.7691  last_time: 0.7589  data_time: 0.0720  last_data_time: 0.0614   lr: 0.00099901  max_mem: 18322M
[03/01 10:25:52] d2.utils.events INFO:  eta: 1:02:11  iter: 119  total_loss: 1.145  loss_cls: 0.9635  loss_box_reg: 0.1809  time: 0.7687  last_time: 0.7567  data_time: 0.0710  last_data_time: 0.0579   lr: 0.0011988  max_mem: 18322M
[03/01 10:26:07] d2.utils.events INFO:  eta: 1:01:50  iter: 139  total_loss: 1.042  loss_cls: 0.8661  loss_box_reg: 0.1826  time: 0.7678  last_time: 0.7879  data_time: 0.0651  last_data_time: 0.0877   lr: 0.0013986  max_mem: 18322M
[03/01 10:26:22] d2.utils.events INFO:  eta: 1:01:33  iter: 159  total_loss: 0.9717  loss_cls: 0.7904  loss_box_reg: 0.1784  time: 0.7674  last_time: 0.7693  data_time: 0.0654  last_data_time: 0.0703   lr: 0.0015984  max_mem: 18322M
[03/01 10:26:38] d2.utils.events INFO:  eta: 1:01:19  iter: 179  total_loss: 0.8947  loss_cls: 0.7096  loss_box_reg: 0.173  time: 0.7666  last_time: 0.7900  data_time: 0.0661  last_data_time: 0.0901   lr: 0.0017982  max_mem: 18322M
[03/01 10:26:53] d2.utils.events INFO:  eta: 1:01:00  iter: 199  total_loss: 0.834  loss_cls: 0.6617  loss_box_reg: 0.1753  time: 0.7656  last_time: 0.7822  data_time: 0.0681  last_data_time: 0.0819   lr: 0.001998  max_mem: 18322M
[03/01 10:27:08] d2.utils.events INFO:  eta: 1:00:45  iter: 219  total_loss: 0.8109  loss_cls: 0.637  loss_box_reg: 0.1714  time: 0.7654  last_time: 0.7673  data_time: 0.0634  last_data_time: 0.0684   lr: 0.0021978  max_mem: 18322M
[03/01 10:27:23] d2.utils.events INFO:  eta: 1:00:31  iter: 239  total_loss: 0.7645  loss_cls: 0.6016  loss_box_reg: 0.1644  time: 0.7653  last_time: 0.7667  data_time: 0.0668  last_data_time: 0.0665   lr: 0.0023976  max_mem: 18322M
[03/01 10:27:39] d2.utils.events INFO:  eta: 1:00:17  iter: 259  total_loss: 0.7273  loss_cls: 0.5623  loss_box_reg: 0.1675  time: 0.7650  last_time: 0.7625  data_time: 0.0668  last_data_time: 0.0628   lr: 0.0025974  max_mem: 18322M
[03/01 10:27:54] d2.utils.events INFO:  eta: 0:59:59  iter: 279  total_loss: 0.6936  loss_cls: 0.5259  loss_box_reg: 0.1612  time: 0.7643  last_time: 0.7641  data_time: 0.0613  last_data_time: 0.0638   lr: 0.0027972  max_mem: 18322M
[03/01 10:28:09] d2.utils.events INFO:  eta: 0:59:47  iter: 299  total_loss: 0.6589  loss_cls: 0.4946  loss_box_reg: 0.1661  time: 0.7645  last_time: 0.7663  data_time: 0.0696  last_data_time: 0.0664   lr: 0.002997  max_mem: 18322M
[03/01 10:28:24] d2.utils.events INFO:  eta: 0:59:29  iter: 319  total_loss: 0.6395  loss_cls: 0.4734  loss_box_reg: 0.1646  time: 0.7642  last_time: 0.7612  data_time: 0.0607  last_data_time: 0.0612   lr: 0.0031968  max_mem: 18322M
[03/01 10:28:39] d2.utils.events INFO:  eta: 0:59:13  iter: 339  total_loss: 0.5895  loss_cls: 0.4332  loss_box_reg: 0.1565  time: 0.7638  last_time: 0.7054  data_time: 0.0627  last_data_time: 0.0493   lr: 0.0033966  max_mem: 18322M
[03/01 10:28:55] d2.utils.events INFO:  eta: 0:58:58  iter: 359  total_loss: 0.5751  loss_cls: 0.4135  loss_box_reg: 0.1623  time: 0.7633  last_time: 0.7407  data_time: 0.0591  last_data_time: 0.0404   lr: 0.0035964  max_mem: 18322M
[03/01 10:29:10] d2.utils.events INFO:  eta: 0:58:42  iter: 379  total_loss: 0.5403  loss_cls: 0.3882  loss_box_reg: 0.1552  time: 0.7632  last_time: 0.7749  data_time: 0.0685  last_data_time: 0.0755   lr: 0.0037962  max_mem: 18322M
[03/01 10:29:25] d2.utils.events INFO:  eta: 0:58:27  iter: 399  total_loss: 0.5188  loss_cls: 0.3591  loss_box_reg: 0.1581  time: 0.7629  last_time: 0.7324  data_time: 0.0628  last_data_time: 0.0766   lr: 0.003996  max_mem: 18322M
[03/01 10:29:40] d2.utils.events INFO:  eta: 0:58:11  iter: 419  total_loss: 0.4793  loss_cls: 0.3369  loss_box_reg: 0.1488  time: 0.7627  last_time: 0.7613  data_time: 0.0616  last_data_time: 0.0609   lr: 0.0041958  max_mem: 18322M
[03/01 10:29:55] d2.utils.events INFO:  eta: 0:57:55  iter: 439  total_loss: 0.4627  loss_cls: 0.3145  loss_box_reg: 0.149  time: 0.7621  last_time: 0.7257  data_time: 0.0557  last_data_time: 0.0691   lr: 0.0043956  max_mem: 18322M
[03/01 10:30:10] d2.utils.events INFO:  eta: 0:57:37  iter: 459  total_loss: 0.4552  loss_cls: 0.3036  loss_box_reg: 0.1526  time: 0.7617  last_time: 0.7042  data_time: 0.0610  last_data_time: 0.0787   lr: 0.0045954  max_mem: 18322M
[03/01 10:30:25] d2.utils.events INFO:  eta: 0:57:21  iter: 479  total_loss: 0.4347  loss_cls: 0.2809  loss_box_reg: 0.1532  time: 0.7615  last_time: 0.7776  data_time: 0.0593  last_data_time: 0.0780   lr: 0.0047952  max_mem: 18322M
[03/01 10:30:40] d2.utils.events INFO:  eta: 0:57:05  iter: 499  total_loss: 0.4328  loss_cls: 0.2788  loss_box_reg: 0.1541  time: 0.7614  last_time: 0.7557  data_time: 0.0613  last_data_time: 0.0561   lr: 0.004995  max_mem: 18322M
[03/01 10:30:56] d2.utils.events INFO:  eta: 0:56:50  iter: 519  total_loss: 0.413  loss_cls: 0.2692  loss_box_reg: 0.1474  time: 0.7613  last_time: 0.7399  data_time: 0.0623  last_data_time: 0.0397   lr: 0.0051948  max_mem: 18322M
[03/01 10:31:11] d2.utils.events INFO:  eta: 0:56:34  iter: 539  total_loss: 0.4077  loss_cls: 0.2582  loss_box_reg: 0.1496  time: 0.7610  last_time: 0.7629  data_time: 0.0569  last_data_time: 0.0613   lr: 0.0053946  max_mem: 18322M
[03/01 10:31:26] d2.utils.events INFO:  eta: 0:56:18  iter: 559  total_loss: 0.3843  loss_cls: 0.2385  loss_box_reg: 0.1471  time: 0.7608  last_time: 0.7483  data_time: 0.0618  last_data_time: 0.0483   lr: 0.0055944  max_mem: 18322M
[03/01 10:31:41] d2.utils.events INFO:  eta: 0:56:02  iter: 579  total_loss: 0.378  loss_cls: 0.2341  loss_box_reg: 0.1464  time: 0.7605  last_time: 0.7142  data_time: 0.0587  last_data_time: 0.0575   lr: 0.0057942  max_mem: 18322M
[03/01 10:31:56] d2.utils.events INFO:  eta: 0:55:47  iter: 599  total_loss: 0.3739  loss_cls: 0.2283  loss_box_reg: 0.1449  time: 0.7604  last_time: 0.7437  data_time: 0.0597  last_data_time: 0.0427   lr: 0.005994  max_mem: 18322M
[03/01 10:32:11] d2.utils.events INFO:  eta: 0:55:31  iter: 619  total_loss: 0.3712  loss_cls: 0.2274  loss_box_reg: 0.1464  time: 0.7603  last_time: 0.7677  data_time: 0.0610  last_data_time: 0.0670   lr: 0.0061938  max_mem: 18322M
[03/01 10:32:26] d2.utils.events INFO:  eta: 0:55:16  iter: 639  total_loss: 0.3477  loss_cls: 0.2101  loss_box_reg: 0.1415  time: 0.7602  last_time: 0.7547  data_time: 0.0570  last_data_time: 0.0532   lr: 0.0063936  max_mem: 18322M
[03/01 10:32:41] d2.utils.events INFO:  eta: 0:54:58  iter: 659  total_loss: 0.3475  loss_cls: 0.2039  loss_box_reg: 0.1421  time: 0.7599  last_time: 0.7504  data_time: 0.0563  last_data_time: 0.0504   lr: 0.0065934  max_mem: 18322M
[03/01 10:32:56] d2.utils.events INFO:  eta: 0:54:43  iter: 679  total_loss: 0.3546  loss_cls: 0.2091  loss_box_reg: 0.147  time: 0.7596  last_time: 0.7616  data_time: 0.0566  last_data_time: 0.0602   lr: 0.0067932  max_mem: 18322M
[03/01 10:33:12] d2.utils.events INFO:  eta: 0:54:26  iter: 699  total_loss: 0.3487  loss_cls: 0.2003  loss_box_reg: 0.1463  time: 0.7595  last_time: 0.7499  data_time: 0.0553  last_data_time: 0.0496   lr: 0.006993  max_mem: 18322M
[03/01 10:33:27] d2.utils.events INFO:  eta: 0:54:10  iter: 719  total_loss: 0.3275  loss_cls: 0.1882  loss_box_reg: 0.1401  time: 0.7594  last_time: 0.7531  data_time: 0.0613  last_data_time: 0.0516   lr: 0.0071928  max_mem: 18322M
[03/01 10:33:42] d2.utils.events INFO:  eta: 0:53:55  iter: 739  total_loss: 0.3259  loss_cls: 0.1883  loss_box_reg: 0.1406  time: 0.7593  last_time: 0.7583  data_time: 0.0568  last_data_time: 0.0578   lr: 0.0073926  max_mem: 18322M
[03/01 10:33:57] d2.utils.events INFO:  eta: 0:53:39  iter: 759  total_loss: 0.3197  loss_cls: 0.1787  loss_box_reg: 0.138  time: 0.7591  last_time: 0.7736  data_time: 0.0572  last_data_time: 0.0727   lr: 0.0075924  max_mem: 18322M
[03/01 10:34:12] d2.utils.events INFO:  eta: 0:53:24  iter: 779  total_loss: 0.3241  loss_cls: 0.1844  loss_box_reg: 0.1396  time: 0.7588  last_time: 0.6942  data_time: 0.0537  last_data_time: 0.0383   lr: 0.0077922  max_mem: 18322M
[03/01 10:34:27] d2.utils.events INFO:  eta: 0:53:07  iter: 799  total_loss: 0.3127  loss_cls: 0.1773  loss_box_reg: 0.1368  time: 0.7586  last_time: 0.7559  data_time: 0.0549  last_data_time: 0.0549   lr: 0.007992  max_mem: 18322M
[03/01 10:34:42] d2.utils.events INFO:  eta: 0:52:52  iter: 819  total_loss: 0.3212  loss_cls: 0.1807  loss_box_reg: 0.1396  time: 0.7585  last_time: 0.7594  data_time: 0.0596  last_data_time: 0.0575   lr: 0.0081918  max_mem: 18322M
[03/01 10:34:57] d2.utils.events INFO:  eta: 0:52:37  iter: 839  total_loss: 0.3094  loss_cls: 0.1743  loss_box_reg: 0.1356  time: 0.7584  last_time: 0.7525  data_time: 0.0572  last_data_time: 0.0518   lr: 0.0083916  max_mem: 18322M
[03/01 10:35:12] d2.utils.events INFO:  eta: 0:52:20  iter: 859  total_loss: 0.3027  loss_cls: 0.1629  loss_box_reg: 0.1376  time: 0.7583  last_time: 0.7584  data_time: 0.0549  last_data_time: 0.0589   lr: 0.0085914  max_mem: 18322M
[03/01 10:35:27] d2.utils.events INFO:  eta: 0:52:06  iter: 879  total_loss: 0.3022  loss_cls: 0.1653  loss_box_reg: 0.1376  time: 0.7582  last_time: 0.7692  data_time: 0.0614  last_data_time: 0.0684   lr: 0.0087912  max_mem: 18322M
[03/01 10:35:42] d2.utils.events INFO:  eta: 0:51:50  iter: 899  total_loss: 0.3047  loss_cls: 0.1649  loss_box_reg: 0.1397  time: 0.7581  last_time: 0.7339  data_time: 0.0533  last_data_time: 0.0336   lr: 0.008991  max_mem: 18322M
[03/01 10:35:57] d2.utils.events INFO:  eta: 0:51:34  iter: 919  total_loss: 0.3006  loss_cls: 0.1622  loss_box_reg: 0.1362  time: 0.7578  last_time: 0.7396  data_time: 0.0547  last_data_time: 0.0391   lr: 0.0091908  max_mem: 18322M
[03/01 10:36:12] d2.utils.events INFO:  eta: 0:51:19  iter: 939  total_loss: 0.2913  loss_cls: 0.1534  loss_box_reg: 0.1354  time: 0.7577  last_time: 0.7603  data_time: 0.0602  last_data_time: 0.0610   lr: 0.0093906  max_mem: 18322M
[03/01 10:36:27] d2.utils.events INFO:  eta: 0:51:04  iter: 959  total_loss: 0.2833  loss_cls: 0.1529  loss_box_reg: 0.1332  time: 0.7578  last_time: 0.7637  data_time: 0.0627  last_data_time: 0.0642   lr: 0.0095904  max_mem: 18322M
[03/01 10:36:43] d2.utils.events INFO:  eta: 0:50:49  iter: 979  total_loss: 0.2846  loss_cls: 0.1504  loss_box_reg: 0.1367  time: 0.7577  last_time: 0.7564  data_time: 0.0568  last_data_time: 0.0567   lr: 0.0097902  max_mem: 18322M
[03/01 10:36:58] d2.utils.events INFO:  eta: 0:50:33  iter: 999  total_loss: 0.3014  loss_cls: 0.158  loss_box_reg: 0.1434  time: 0.7576  last_time: 0.7220  data_time: 0.0583  last_data_time: 0.0664   lr: 0.00999  max_mem: 18322M
[03/01 10:37:13] d2.utils.events INFO:  eta: 0:50:17  iter: 1019  total_loss: 0.2817  loss_cls: 0.15  loss_box_reg: 0.1359  time: 0.7574  last_time: 0.7367  data_time: 0.0519  last_data_time: 0.0370   lr: 0.01  max_mem: 18322M
[03/01 10:37:28] d2.utils.events INFO:  eta: 0:50:01  iter: 1039  total_loss: 0.2884  loss_cls: 0.1545  loss_box_reg: 0.133  time: 0.7573  last_time: 0.7609  data_time: 0.0576  last_data_time: 0.0623   lr: 0.01  max_mem: 18322M
[03/01 10:37:43] d2.utils.events INFO:  eta: 0:49:45  iter: 1059  total_loss: 0.2801  loss_cls: 0.1457  loss_box_reg: 0.1348  time: 0.7572  last_time: 0.7670  data_time: 0.0530  last_data_time: 0.0660   lr: 0.01  max_mem: 18322M
[03/01 10:37:57] d2.utils.events INFO:  eta: 0:49:28  iter: 1079  total_loss: 0.2651  loss_cls: 0.1364  loss_box_reg: 0.1285  time: 0.7569  last_time: 0.7428  data_time: 0.0567  last_data_time: 0.0424   lr: 0.01  max_mem: 18322M
[03/01 10:38:13] d2.utils.events INFO:  eta: 0:49:12  iter: 1099  total_loss: 0.2853  loss_cls: 0.1471  loss_box_reg: 0.1384  time: 0.7568  last_time: 0.7480  data_time: 0.0546  last_data_time: 0.0464   lr: 0.01  max_mem: 18322M
[03/01 10:38:27] d2.utils.events INFO:  eta: 0:48:54  iter: 1119  total_loss: 0.2688  loss_cls: 0.1426  loss_box_reg: 0.1307  time: 0.7565  last_time: 0.7508  data_time: 0.0520  last_data_time: 0.0517   lr: 0.01  max_mem: 18322M
[03/01 10:38:42] d2.utils.events INFO:  eta: 0:48:38  iter: 1139  total_loss: 0.2688  loss_cls: 0.1347  loss_box_reg: 0.1356  time: 0.7563  last_time: 0.7024  data_time: 0.0538  last_data_time: 0.0461   lr: 0.01  max_mem: 18322M
[03/01 10:38:57] d2.utils.events INFO:  eta: 0:48:22  iter: 1159  total_loss: 0.271  loss_cls: 0.1392  loss_box_reg: 0.1334  time: 0.7562  last_time: 0.7579  data_time: 0.0551  last_data_time: 0.0577   lr: 0.01  max_mem: 18322M
[03/01 10:39:12] d2.utils.events INFO:  eta: 0:48:07  iter: 1179  total_loss: 0.2712  loss_cls: 0.1371  loss_box_reg: 0.1344  time: 0.7562  last_time: 0.7566  data_time: 0.0524  last_data_time: 0.0561   lr: 0.01  max_mem: 18322M
[03/01 10:39:27] d2.utils.events INFO:  eta: 0:47:51  iter: 1199  total_loss: 0.2708  loss_cls: 0.1366  loss_box_reg: 0.1336  time: 0.7560  last_time: 0.7055  data_time: 0.0554  last_data_time: 0.0488   lr: 0.01  max_mem: 18322M
[03/01 10:39:42] d2.utils.events INFO:  eta: 0:47:35  iter: 1219  total_loss: 0.261  loss_cls: 0.1335  loss_box_reg: 0.1296  time: 0.7558  last_time: 0.7446  data_time: 0.0470  last_data_time: 0.0451   lr: 0.01  max_mem: 18322M
[03/01 10:39:57] d2.utils.events INFO:  eta: 0:47:19  iter: 1239  total_loss: 0.2612  loss_cls: 0.1327  loss_box_reg: 0.128  time: 0.7557  last_time: 0.7385  data_time: 0.0541  last_data_time: 0.0378   lr: 0.01  max_mem: 18322M
[03/01 10:40:12] d2.utils.events INFO:  eta: 0:47:03  iter: 1259  total_loss: 0.2608  loss_cls: 0.1313  loss_box_reg: 0.1296  time: 0.7556  last_time: 0.7574  data_time: 0.0476  last_data_time: 0.0568   lr: 0.01  max_mem: 18322M
[03/01 10:40:27] d2.utils.events INFO:  eta: 0:46:48  iter: 1279  total_loss: 0.2578  loss_cls: 0.1274  loss_box_reg: 0.1299  time: 0.7552  last_time: 0.7512  data_time: 0.0454  last_data_time: 0.0525   lr: 0.01  max_mem: 18322M
[03/01 10:40:42] d2.utils.events INFO:  eta: 0:46:31  iter: 1299  total_loss: 0.2578  loss_cls: 0.1275  loss_box_reg: 0.1295  time: 0.7551  last_time: 0.7315  data_time: 0.0499  last_data_time: 0.0312   lr: 0.01  max_mem: 18322M
[03/01 10:40:57] d2.utils.events INFO:  eta: 0:46:15  iter: 1319  total_loss: 0.2622  loss_cls: 0.1299  loss_box_reg: 0.1303  time: 0.7550  last_time: 0.7493  data_time: 0.0498  last_data_time: 0.0496   lr: 0.01  max_mem: 18322M
[03/01 10:41:11] d2.utils.events INFO:  eta: 0:45:59  iter: 1339  total_loss: 0.2581  loss_cls: 0.1269  loss_box_reg: 0.1297  time: 0.7547  last_time: 0.7583  data_time: 0.0477  last_data_time: 0.0575   lr: 0.01  max_mem: 18322M
[03/01 10:41:26] d2.utils.events INFO:  eta: 0:45:41  iter: 1359  total_loss: 0.2442  loss_cls: 0.1195  loss_box_reg: 0.1252  time: 0.7546  last_time: 0.7472  data_time: 0.0499  last_data_time: 0.0490   lr: 0.01  max_mem: 18322M
[03/01 10:41:41] d2.utils.events INFO:  eta: 0:45:24  iter: 1379  total_loss: 0.2473  loss_cls: 0.1219  loss_box_reg: 0.1267  time: 0.7543  last_time: 0.7434  data_time: 0.0431  last_data_time: 0.0437   lr: 0.01  max_mem: 18322M
[03/01 10:41:56] d2.utils.events INFO:  eta: 0:45:09  iter: 1399  total_loss: 0.2578  loss_cls: 0.1244  loss_box_reg: 0.132  time: 0.7542  last_time: 0.7542  data_time: 0.0477  last_data_time: 0.0542   lr: 0.01  max_mem: 18322M
[03/01 10:42:11] d2.utils.events INFO:  eta: 0:44:53  iter: 1419  total_loss: 0.2472  loss_cls: 0.1184  loss_box_reg: 0.1279  time: 0.7540  last_time: 0.7351  data_time: 0.0476  last_data_time: 0.0365   lr: 0.01  max_mem: 18322M
[03/01 10:42:26] d2.utils.events INFO:  eta: 0:44:37  iter: 1439  total_loss: 0.2474  loss_cls: 0.1213  loss_box_reg: 0.1267  time: 0.7538  last_time: 0.7503  data_time: 0.0470  last_data_time: 0.0517   lr: 0.01  max_mem: 18322M
[03/01 10:42:41] d2.utils.events INFO:  eta: 0:44:21  iter: 1459  total_loss: 0.2455  loss_cls: 0.1194  loss_box_reg: 0.1275  time: 0.7537  last_time: 0.7440  data_time: 0.0507  last_data_time: 0.0441   lr: 0.01  max_mem: 18322M
[03/01 10:42:55] d2.utils.events INFO:  eta: 0:44:06  iter: 1479  total_loss: 0.2511  loss_cls: 0.1209  loss_box_reg: 0.1294  time: 0.7535  last_time: 0.7706  data_time: 0.0516  last_data_time: 0.0709   lr: 0.01  max_mem: 18322M
[03/01 10:43:10] d2.utils.events INFO:  eta: 0:43:49  iter: 1499  total_loss: 0.2395  loss_cls: 0.1108  loss_box_reg: 0.1255  time: 0.7534  last_time: 0.7647  data_time: 0.0460  last_data_time: 0.0641   lr: 0.01  max_mem: 18322M
[03/01 10:43:25] d2.utils.events INFO:  eta: 0:43:32  iter: 1519  total_loss: 0.2357  loss_cls: 0.115  loss_box_reg: 0.123  time: 0.7532  last_time: 0.6938  data_time: 0.0441  last_data_time: 0.0384   lr: 0.01  max_mem: 18322M
[03/01 10:43:40] d2.utils.events INFO:  eta: 0:43:16  iter: 1539  total_loss: 0.2387  loss_cls: 0.1152  loss_box_reg: 0.1241  time: 0.7530  last_time: 0.7560  data_time: 0.0487  last_data_time: 0.0550   lr: 0.01  max_mem: 18322M
[03/01 10:43:55] d2.utils.events INFO:  eta: 0:43:00  iter: 1559  total_loss: 0.2494  loss_cls: 0.1211  loss_box_reg: 0.129  time: 0.7528  last_time: 0.7421  data_time: 0.0470  last_data_time: 0.0421   lr: 0.01  max_mem: 18322M
[03/01 10:44:09] d2.utils.events INFO:  eta: 0:42:43  iter: 1579  total_loss: 0.2396  loss_cls: 0.1121  loss_box_reg: 0.1266  time: 0.7527  last_time: 0.7570  data_time: 0.0457  last_data_time: 0.0576   lr: 0.01  max_mem: 18322M
[03/01 10:44:24] d2.utils.events INFO:  eta: 0:42:28  iter: 1599  total_loss: 0.2513  loss_cls: 0.1191  loss_box_reg: 0.1318  time: 0.7526  last_time: 0.7458  data_time: 0.0446  last_data_time: 0.0442   lr: 0.01  max_mem: 18322M
[03/01 10:44:39] d2.utils.events INFO:  eta: 0:42:11  iter: 1619  total_loss: 0.2358  loss_cls: 0.1117  loss_box_reg: 0.1236  time: 0.7522  last_time: 0.7381  data_time: 0.0374  last_data_time: 0.0364   lr: 0.01  max_mem: 18322M
[03/01 10:44:53] d2.utils.events INFO:  eta: 0:41:54  iter: 1639  total_loss: 0.2341  loss_cls: 0.1096  loss_box_reg: 0.1257  time: 0.7520  last_time: 0.6929  data_time: 0.0394  last_data_time: 0.0368   lr: 0.01  max_mem: 18322M
[03/01 10:45:08] d2.utils.events INFO:  eta: 0:41:37  iter: 1659  total_loss: 0.2333  loss_cls: 0.1086  loss_box_reg: 0.1274  time: 0.7518  last_time: 0.7375  data_time: 0.0401  last_data_time: 0.0356   lr: 0.01  max_mem: 18322M
[03/01 10:45:12] fvcore.common.checkpoint INFO: Saving checkpoint to ./output/model_0001664.pth
[03/01 10:45:13] d2.data.datasets.coco WARNING: 
Category ids in annotations are not in [1, #categories]! We'll apply a mapping for you.

[03/01 10:45:13] d2.data.datasets.coco INFO: Loaded 160 images in COCO format from /media/nahyun/HDD//data_100/instances_test.json
[03/01 10:45:13] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[03/01 10:45:13] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[03/01 10:45:13] d2.data.common INFO: Serializing 160 elements to byte tensors and concatenating them all ...
[03/01 10:45:13] d2.data.common INFO: Serialized dataset takes 0.44 MiB
[03/01 10:45:13] d2.evaluation.evaluator INFO: Start inference on 160 batches
[03/01 10:45:13] d2.evaluation.evaluator INFO: Inference done 11/160. Dataloading: 0.0004 s/iter. Inference: 0.0289 s/iter. Eval: 0.0002 s/iter. Total: 0.0294 s/iter. ETA=0:00:04
[03/01 10:45:18] d2.evaluation.evaluator INFO: Total inference time: 0:00:04.642303 (0.029950 s / iter per device, on 1 devices)
[03/01 10:45:18] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:04 (0.028880 s / iter per device, on 1 devices)
[03/01 10:45:18] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[03/01 10:45:18] d2.evaluation.coco_evaluation INFO: Saving results to ./output/inference/coco_instances_results.json
[03/01 10:45:18] d2.evaluation.coco_evaluation INFO: Evaluating predictions with unofficial COCO API...
[03/01 10:45:18] d2.evaluation.fast_eval_api INFO: Evaluate annotation type *bbox*
[03/01 10:45:18] d2.evaluation.fast_eval_api INFO: COCOeval_opt.evaluate() finished in 0.20 seconds.
[03/01 10:45:18] d2.evaluation.fast_eval_api INFO: Accumulating evaluation results...
[03/01 10:45:18] d2.evaluation.fast_eval_api INFO: COCOeval_opt.accumulate() finished in 0.11 seconds.
[03/01 10:45:18] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs   |  APm   |  APl   |
|:------:|:------:|:------:|:------:|:------:|:------:|
| 22.231 | 31.405 | 25.210 | 11.927 | 34.064 | 47.946 |
[03/01 10:45:18] d2.evaluation.coco_evaluation INFO: Per-category bbox AP: 
| category                   | AP     | category                     | AP     | category                     | AP     |
|:---------------------------|:-------|:-----------------------------|:-------|:-----------------------------|:-------|
| 000_aveda_shampoo          | 25.656 | 001_binder_clips_median      | 29.458 | 002_binder_clips_small       | 22.240 |
| 003_bombik_bucket          | 13.578 | 004_bonne_maman_blueberry    | 0.831  | 005_bonne_maman_raspberry    | 2.019  |
| 006_bonne_maman_strawberry | 0.166  | 007_costa_caramel            | 34.438 | 008_essential_oil_bergamot   | 25.410 |
| 009_garlic_toast_spread    | 7.129  | 010_handcream_avocado        | 2.288  | 011_hb_calcium               | 18.245 |
| 012_hb_grapeseed           | 10.984 | 013_hb_marine_collagen       | 13.159 | 014_hellmanns_mayonnaise     | 16.287 |
| 015_illy_blend             | 2.924  | 016_japanese_finger_cookies  | 2.992  | 017_john_west_canned_tuna    | 10.942 |
| 018_kerastase_shampoo      | 12.134 | 019_kiehls_facial_cream      | 32.085 | 020_kiihne_balsamic          | 17.506 |
| 021_kiihne_honey_mustard   | 34.363 | 022_lindor_matcha            | 30.906 | 023_lindor_salted_caramel    | 39.385 |
| 024_lush_mask              | 83.891 | 025_pasta_sauce_black_pepper | 6.964  | 026_pasta_sauce_tomato       | 12.223 |
| 027_pepsi                  | 54.394 | 028_portable_yogurt_machine  | 7.283  | 029_selfile_stick            | 2.107  |
| 030_sour_lemon_drops       | 11.850 | 031_sticky_notes             | 18.673 | 032_stridex_green            | 52.238 |
| 033_thermos_flask_cream    | 45.340 | 034_thermos_flask_muji       | 8.831  | 035_thermos_flask_sliver     | 0.066  |
| 036_tragata_olive_oil      | 8.423  | 037_tulip_luncheon_meat      | 15.624 | 038_unicharm_cotton_pad      | 62.226 |
| 039_vinda_tissue           | 45.157 | 040_wrigley_doublemint_gum   | 2.771  | 041_baseball_cap_black       | 35.534 |
| 042_baseball_cap_pink      | 44.259 | 043_bfe_facial_mask          | 36.056 | 044_corgi_doll               | 17.561 |
| 045_dinosaur_doll          | 41.523 | 046_geo_mocha                | 13.073 | 047_geo_roast_charcoal       | 11.720 |
| 048_instant_noodle_black   | 9.704  | 049_instant_noodle_red       | 17.975 | 050_nabati_cheese_wafer      | 38.859 |
| 051_truffettes             | 19.369 | 052_acnes_cream              | 39.052 | 053_aveda_conditioner        | 53.951 |
| 054_banana_milk_drink      | 6.287  | 055_candle_beast             | 22.526 | 056_china_persimmon          | 13.482 |
| 057_danisa_butter_cookies  | 10.404 | 058_effaclar_duo             | 15.066 | 059_evelom_cleanser          | 52.035 |
| 060_glasses_box_blone      | 29.578 | 061_handcream_iris           | 0.102  | 062_handcream_lavender       | 0.035  |
| 063_handcream_rosewater    | 1.055  | 064_handcream_summer_hill    | 0.000  | 065_hr_serum                 | 21.436 |
| 066_japanese_chocolate     | 47.124 | 067_kerastase_hair_treatment | 30.806 | 068_kiehls_serum             | 50.289 |
| 069_korean_beef_marinade   | 42.032 | 070_korean_doenjang          | 23.301 | 071_korean_gochujang         | 0.178  |
| 072_korean_ssamjang        | 48.355 | 073_loccitane_soap           | 37.165 | 074_marvis_toothpaste_purple | 50.115 |
| 075_mouse_thinkpad         | 12.546 | 076_oatly_chocolate          | 18.151 | 077_oatly_original           | 29.464 |
| 078_ousa_grated_cheese     | 1.647  | 079_polaroid_film            | 1.394  | 080_skinceuticals_be         | 54.951 |
| 081_skinceuticals_cf       | 34.065 | 082_skinceuticals_phyto      | 23.129 | 083_stapler_black            | 15.249 |
| 084_stapler_blue           | 27.444 | 085_sunscreen_blue           | 22.841 | 086_tempo_pocket_tissue      | 3.031  |
| 087_thermos_flask_purple   | 45.156 | 088_uha_matcha               | 9.564  | 089_urban_decay_spray        | 25.281 |
| 090_vitaboost_multivitamin | 14.505 | 091_watercolor_penbox        | 1.284  | 092_youthlt_bilberry_complex | 0.000  |
| 093_daiso_mod_remover      | 36.266 | 094_kaneyo_kitchen_bleach    | 37.077 | 095_lays_chip_bag_blue       | 16.698 |
| 096_lays_chip_bag_green    | 13.759 | 097_lays_chip_tube_auburn    | 9.873  | 098_lays_chip_tube_green     | 46.535 |
| 099_mug_blue               | 0.000  |                              |        |                              |        |
[03/01 10:45:18] d2.engine.defaults INFO: Evaluation results for retinanet_test in csv format:
[03/01 10:45:18] d2.evaluation.testing INFO: copypaste: Task: bbox
[03/01 10:45:18] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[03/01 10:45:18] d2.evaluation.testing INFO: copypaste: 22.2310,31.4048,25.2102,11.9270,34.0639,47.9461
[03/01 10:45:29] d2.utils.events INFO:  eta: 0:41:20  iter: 1679  total_loss: 0.2252  loss_cls: 0.1065  loss_box_reg: 0.1188  time: 0.7516  last_time: 0.7377  data_time: 0.0398  last_data_time: 0.0383   lr: 0.01  max_mem: 18322M
[03/01 10:45:33] d2.engine.hooks INFO: Overall training speed: 1683 iterations in 0:21:05 (0.7520 s / it)
[03/01 10:45:33] d2.engine.hooks INFO: Total training time: 0:21:11 (0:00:06 on hooks)
[03/01 10:45:33] d2.utils.events INFO:  eta: 0:41:15  iter: 1685  total_loss: 0.2271  loss_cls: 0.1076  loss_box_reg: 0.1198  time: 0.7516  last_time: 0.7378  data_time: 0.0403  last_data_time: 0.0380   lr: 0.01  max_mem: 18322M
